plugins {
    id 'idea'
    id 'net.neoforged.moddev.legacyforge' version '2.0.78'
}

group = mod_group_id
version = mod_version

base {
    archivesName = "$mod_id-forge-$minecraft_version"
}

java {
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

sourceSets {
    datagen {
        java {
            compileClasspath += main.compileClasspath
            compileClasspath += main.output
            runtimeClasspath += main.output
        }
    }
}

legacyForge {
    version = "${minecraft_version}-${forge_version}"

    if (Boolean.getBoolean(enableAccessTransformers)){
        accessTransformers = [file('src/main/resources/META-INF/accesstransformer.cfg')]
    }

    if (mapping_channel=="parchment"){
        parchment {
            minecraftVersion = '1.20.1'
            mappingsVersion = '2023.09.03'
        }
    }

    runs {
        client {
            client()
        }
        data {
            data()
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }
        server {
            server()
        }
        configureEach {
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        randomcardrewards {
            sourceSet sourceSets.main
            sourceSet(sourceSets.datagen)
        }
    }
}

//mixin {
//    add sourceSets.main, "${mod_id}.refmap.json"
//    config "${mod_id}.mixins.json"
//}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = "https://maven.theillusivec4.top/" }
    maven { url "https://maven.shedaniel.me/" }
    maven {
        url "https://maven.latvian.dev/releases"
        content {
            includeGroup "dev.latvian.mods"
            includeGroup "dev.latvian.apps"
        }
    }

    maven {
        url 'https://jitpack.io'
        content {
            includeGroup "com.github.rtyley"
        }
    }
}

dependencies {

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    compileOnly 'org.jetbrains:annotations:24.0.1'

    modCompileOnlyApi("dev.latvian.mods:kubejs-forge:$kubejs_version")
    modCompileOnly("dev.latvian.mods:rhino:$rhino_version")
    //interfaceInjectionData("dev.latvian.mods:kubejs-forge:$kubejs_version") // optional
}

processResources {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]

    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }}

jar {
    manifest {
        attributes([
                "Specification-Title": mod_id,
                "Specification-Vendor": mod_authors,
                "Specification-Version": "1", // We are version 1 of ourselves
                "Implementation-Title": project.name,
                "Implementation-Version": project.jar.archiveVersion,
                "Implementation-Vendor": mod_authors,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
